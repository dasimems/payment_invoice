<?php

 function generate_csrf_token(){
   $token =  base64_encode(md5(random_bytes(20)));
   $_SESSION["csrf_token"] = $token;
   return $token;
 }

 function validate_csrf_token(){
        $token = isset($_POST["csrf-token"]) ? $_POST["csrf-token"] : null;
        $stored_token = isset($_SESSION["csrf_token"]) ? $_SESSION["csrf_token"] : null;
        unset($_SESSION["csrf_token"]);
        unset($_POST["csrf-token"]);
        return $token === $stored_token;
        
 }

 function array_html_special_chars($array){
  return array_map(
    function($item){
      if(is_int($item)){ return $item; }
     return htmlspecialchars($item);
    } , $array
  );
 }

      /**
      * base64 url encode a string
      * @param string $string the string to be encoded
      * @return string
      */
      function base64_url_encode($string){
        return str_replace(['+','/','='],['-','_',''], base64_encode($string));
      }


       /**
     * base64 url decode a string
     * @param string $string the string to be decoded
     * @return string
     */
     function base64_url_decode($string){
        return str_replace(['+','/','='],['-','_',''], base64_decode($string));
     }


  /**
     * use for encrypting data using open_ssl
     * @param string $string the string to be encrypted
     * @return string encrypted string
     */
    function encrypt($string){
      $output = "";
      $ciphering = "AES-128-CTR";
      $iv_length = openssl_cipher_iv_length($ciphering);
      $options = 0;
      $encryption_iv = random_bytes($iv_length);
      $encryption_key = base64_url_decode($string);
       $output = openssl_encrypt($string,$ciphering,$encryption_key,$options,$encryption_iv); 
       $output = base64_encode($output) .'.' . base64_encode($encryption_key) . 
       '.' . base64_encode($encryption_iv) ;
        $output = base64_encode($output);
      return $output;
    }

     /**
     * use for encrypting data using open_ssl
     * @param string $string the string to be encrypted
     * @return string encrypted string
     */
    function decrypt($string){
      $output = "";
      $ciphering = "AES-128-CTR";
      $options = 0;
       $string = base64_decode($string);
         $payload = explode('.', $string);
     $output = openssl_decrypt(base64_decode($payload[0]) , $ciphering , 
     base64_decode($payload[1]) , $options , base64_decode($payload[2]));
       return $output;
    }

    /**
     * use for hashing a string using the hash algo
     * @param string $string the string to be hashed
     * @param string $algo the sha algo to use these include sha1 , sha328 , md5
     * @param string $secret the secret to use in hashing the string
     */
    function hash_data($string , $algo , $secret ){
      return hash_hmac($algo , $string , $secret);
    }

     /**
     * generate a token using the payload
     * @param mixed $payload
     * @return string $token
     */
    function tokenizer($payload){
      $data = serialize($payload);
      $data = encrypt($data);
      $token = $data . hash_data($data , 'md5' , $data);
      $token = base64_url_encode($token);
      return $token;
   }
    /**
     * validate a token generated by the tokenizer and return payload 
     * sent with the token if the token is valid.
     * @param string $token the token to be validated
     * @return mixed 
     */
    function validate_token(string $token){
      $token = base64_decode($token);
        $signature = substr($token , strlen($token) - 32 , 32);
        $payload = substr($token , 0 , strlen($token) - 32);
        $generated_token = $payload . hash_data($payload , 'md5' , $payload);
        if(!($generated_token === $token)) return false;
        $payload = decrypt($payload);
        $payload = unserialize($payload);
        return $payload;
     }

    function check_login()
    {
      $session_id = isset($_SESSION["login_session"]) ? $_SESSION["login_session"] : "null";
      $valid_session = validate_token($session_id);
      if(!$valid_session){
        $page = isset($_SERVER["REQUEST_URI"]) ? rtrim($_SERVER["REQUEST_URI"] , "/") : "";
        $param = !empty($page) ? "?redir=" .urlencode($page) : "";
        $page = "http://" . $_SERVER["HTTP_HOST"] . "/login.php" . $param;
        header("Status: 301");
        header("Location: $page");
        exit;
      }
    }